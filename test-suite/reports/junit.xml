<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="2" skipped="0" tests="2" time="19.276" timestamp="2024-07-20T14:07:31.475847" hostname="Greenhat"><testcase classname="test_integration" name="test_title_is_rendering" time="8.681"><failure message="selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED&#10;  (Session info: chrome=126.0.6478.126)&#10;Stacktrace:&#10;#0 0x558afc9ffc3a &lt;unknown&gt;&#10;#1 0x558afc6fa29c &lt;unknown&gt;&#10;#2 0x558afc6f1e30 &lt;unknown&gt;&#10;#3 0x558afc6e19d4 &lt;unknown&gt;&#10;#4 0x558afc6e3032 &lt;unknown&gt;&#10;#5 0x558afc6e1c7a &lt;unknown&gt;&#10;#6 0x558afc6e1403 &lt;unknown&gt;&#10;#7 0x558afc6e1325 &lt;unknown&gt;&#10;#8 0x558afc6df346 &lt;unknown&gt;&#10;#9 0x558afc6df84a &lt;unknown&gt;&#10;#10 0x558afc6fcc87 &lt;unknown&gt;&#10;#11 0x558afc787f55 &lt;unknown&gt;&#10;#12 0x558afc768942 &lt;unknown&gt;&#10;#13 0x558afc78733a &lt;unknown&gt;&#10;#14 0x558afc7686e3 &lt;unknown&gt;&#10;#15 0x558afc738879 &lt;unknown&gt;&#10;#16 0x558afc7391ce &lt;unknown&gt;&#10;#17 0x558afc9c895f &lt;unknown&gt;&#10;#18 0x558afc9ccae6 &lt;unknown&gt;&#10;#19 0x558afc9b578c &lt;unknown&gt;&#10;#20 0x558afc9cd281 &lt;unknown&gt;&#10;#21 0x558afc99b6be &lt;unknown&gt;&#10;#22 0x558afc9ef0c8 &lt;unknown&gt;&#10;#23 0x558afc9ef2d6 &lt;unknown&gt;&#10;#24 0x558afc9feced &lt;unknown&gt;&#10;#25 0x7f21cd44bac3 &lt;unknown&gt;">driver = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="a38979b4e344d5b4227d99bae00c426d")&gt;

    def test_title_is_rendering(driver):
&gt;       driver.get(APP_URL)

test_integration.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.env/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:363: in get
    self.execute(Command.GET, {"url": url})
.env/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fc50ccd5630&gt;
response = {'status': 500, 'value': '{"value":{"error":"unknown error","message":"unknown error: net::ERR_CONNECTION_REFUSED\\n  ...\\n#23 0x558afc9ef2d6 \\u003Cunknown&gt;\\n#24 0x558afc9feced \\u003Cunknown&gt;\\n#25 0x7f21cd44bac3 \\u003Cunknown&gt;\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "&lt;anonymous&gt;")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "&lt;anonymous&gt;")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED
E         (Session info: chrome=126.0.6478.126)
E       Stacktrace:
E       #0 0x558afc9ffc3a &lt;unknown&gt;
E       #1 0x558afc6fa29c &lt;unknown&gt;
E       #2 0x558afc6f1e30 &lt;unknown&gt;
E       #3 0x558afc6e19d4 &lt;unknown&gt;
E       #4 0x558afc6e3032 &lt;unknown&gt;
E       #5 0x558afc6e1c7a &lt;unknown&gt;
E       #6 0x558afc6e1403 &lt;unknown&gt;
E       #7 0x558afc6e1325 &lt;unknown&gt;
E       #8 0x558afc6df346 &lt;unknown&gt;
E       #9 0x558afc6df84a &lt;unknown&gt;
E       #10 0x558afc6fcc87 &lt;unknown&gt;
E       #11 0x558afc787f55 &lt;unknown&gt;
E       #12 0x558afc768942 &lt;unknown&gt;
E       #13 0x558afc78733a &lt;unknown&gt;
E       #14 0x558afc7686e3 &lt;unknown&gt;
E       #15 0x558afc738879 &lt;unknown&gt;
E       #16 0x558afc7391ce &lt;unknown&gt;
E       #17 0x558afc9c895f &lt;unknown&gt;
E       #18 0x558afc9ccae6 &lt;unknown&gt;
E       #19 0x558afc9b578c &lt;unknown&gt;
E       #20 0x558afc9cd281 &lt;unknown&gt;
E       #21 0x558afc99b6be &lt;unknown&gt;
E       #22 0x558afc9ef0c8 &lt;unknown&gt;
E       #23 0x558afc9ef2d6 &lt;unknown&gt;
E       #24 0x558afc9feced &lt;unknown&gt;
E       #25 0x7f21cd44bac3 &lt;unknown&gt;

.env/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException</failure></testcase><testcase classname="test_integration" name="test_text_change_after_submit" time="10.440"><failure message="selenium.common.exceptions.TimeoutException: Message:">driver = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="a38979b4e344d5b4227d99bae00c426d")&gt;

    def test_text_change_after_submit(driver):
        # Locate the span and get its initial text
        span = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, "//span"))
        )
        initial_text = span.text
    
        # Locate the button and click it
        button = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, "//button"))
        )
        button.click()
    
        # Wait for the span's text to change
&gt;       WebDriverWait(driver, 10).until(
            lambda d: d.find_element(By.XPATH, "//span").text != initial_text
        )

test_integration.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.support.wait.WebDriverWait (session="a38979b4e344d5b4227d99bae00c426d")&gt;
method = &lt;function test_text_change_after_submit.&lt;locals&gt;.&lt;lambda&gt; at 0x7fc50cb76dd0&gt;, message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -&gt; T:
        """Calls the method provided with the driver as an argument until the \
        return value does not evaluate to ``False``.
    
        :param method: callable(WebDriver)
        :param message: optional message for :exc:`TimeoutException`
        :returns: the result of the last call to `method`
        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            time.sleep(self._poll)
            if time.monotonic() &gt; end_time:
                break
&gt;       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message:

.env/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException</failure></testcase></testsuite></testsuites>